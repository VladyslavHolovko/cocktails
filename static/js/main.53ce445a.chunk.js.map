{"version":3,"sources":["utils/normalizeDrink.js","utils/fetchDrinkData.js","components/DrinkModal/index.js","components/Loader/index.js","hooks/usePersistedState.js","constants/alcoholicOptions.js","components/FilterByAlcohol/index.js","components/Filters/index.js","api/getRequest.js","hooks/useCocktailsList.js","utils/observe.js","components/Drink/index.js","components/CocktailsList/index.js","app/index.js","reportWebVitals.js","index.js"],"names":["normalizeDrink","drink","ingredientsArray","Object","entries","forEach","key","value","includes","ingredientIndex","replace","ingredientMeasure","push","id","idDrink","name","strDrink","category","strCategory","instructions","strInstructions","image","strDrinkThumb","ingredients","fetchDrinkData","callback","a","fetch","then","response","json","drinks","DrinkModal","onClose","useState","drinkData","setDrinkData","useEffect","Modal","className","open","disableAutoFocus","src","alt","map","measure","Loader","usePersistedState","defaultValue","JSON","parse","localStorage","getItem","state","setState","setItem","stringify","alcoholicOptions","FilterByAlcohol","onChange","FormControl","component","RadioGroup","row","option","FormControlLabel","control","Radio","color","label","Filters","onSearch","isFilterByName","setIsFilterByName","inputValue","setInputValue","radioValue","setRadioValue","searchByName","Tooltip","title","IconButton","edge","onClick","TextField","fullWidth","event","target","placeholder","onKeyPress","ev","preventDefault","alcohol","searchByAlcohol","refresh","getDrinks","params","path","useCocktailsList","cocktailsList","setCocktailsList","addRandomDrink","newDrink","some","drinksList","Array","fill","observe","observer","IntersectionObserver","entities","isIntersecting","rootMargin","threshold","Drink","onDrinkClick","CocktailsList","length","CocktailsApp","modalData","setModalData","isLazyLoading","setIsLazyLoading","filterParam","setFilterParam","loader","useRef","current","fontSize","isFiltered","ref","style","display","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53ce445a.chunk.js","sourcesContent":["const normalizeDrink = drink => {\r\n    const ingredientsArray = [];\r\n\r\n    Object.entries(drink).forEach(([key, value]) => {\r\n        if (value && key.includes('strIngredient')) {\r\n            const ingredientIndex = key.replace('strIngredient', '');\r\n            const ingredientMeasure = drink['strMeasure' + ingredientIndex];\r\n            ingredientsArray.push([value, ingredientMeasure]);\r\n        }\r\n    });\r\n\r\n    return {\r\n        id: drink.idDrink,\r\n        name: drink.strDrink,\r\n        category: drink.strCategory,\r\n        instructions: drink.strInstructions,\r\n        image: drink.strDrinkThumb,\r\n        ingredients: ingredientsArray\r\n    }\r\n}\r\n\r\nexport default normalizeDrink;","import normalizeDrink from \"./normalizeDrink\";\r\n\r\nconst fetchDrinkData = async (id, callback) => {\r\n    const drink = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`)\r\n        .then(response => response.json())\r\n        .then(({ drinks }) => drinks[0])\r\n        .then(normalizeDrink);\r\n\r\n    callback(drink);\r\n}\r\n\r\nexport default fetchDrinkData;","import './index.scss';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport fetchDrinkData from \"../../utils/fetchDrinkData\";\r\n\r\nconst DrinkModal = ({ drink, onClose }) => {\r\n    const [drinkData, setDrinkData] = useState({ ...drink });\r\n\r\n    useEffect(() => {\r\n        if (!!drink && !drink.instructions) {\r\n            fetchDrinkData(drink.id, setDrinkData);\r\n            return;\r\n        }\r\n        setDrinkData({ ...drink });\r\n    }, [drink]);\r\n\r\n    const { image, name, instructions, ingredients } = drinkData;\r\n\r\n    return (\r\n        <Modal\r\n            className=\"modal\"\r\n            open={!!drink}\r\n            onClose={onClose}\r\n            disableAutoFocus\r\n        >\r\n            <div\r\n                className=\"modal__container\"\r\n            >\r\n                <div className=\"modal__img-container\">\r\n                    <img src={image} alt={name} className=\"modal__img\"/>\r\n                </div>\r\n                <div className=\"modal__description\">\r\n                    <h2 className=\"modal__drink-name\">\r\n                        {name}\r\n                    </h2>\r\n                    <div className=\"modal__ingredients-container\">\r\n                        <ul className=\"modal__ingredients-list\">\r\n                            {ingredients?.map(([name, measure]) => (\r\n                                <li key={name}>\r\n                                    <p className=\"modal__ingredients-item\">\r\n                                        <b>{name}</b>{measure && ':'} {measure}\r\n                                    </p>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"modal__instruction-container\">\r\n                        <p className=\"modal__instruction\">{instructions}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DrinkModal;","import './index.scss';\r\nimport React from 'react';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import { useState, useEffect } from 'react';\r\n\r\nconst usePersistedState = (key, defaultValue) => {\r\n    const [state, setState] = useState(\r\n        () => JSON.parse(localStorage.getItem(key)) || defaultValue\r\n    );\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(state));\r\n    }, [key, state]);\r\n    return [state, setState];\r\n}\r\n\r\nexport default usePersistedState;","const alcoholicOptions = [\r\n    \"Alcoholic\",\r\n    \"Non alcoholic\",\r\n    \"Optional alcohol\"\r\n]\r\n\r\nexport default alcoholicOptions;","import './index.scss';\r\nimport React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport alcoholicOptions from \"../../constants/alcoholicOptions\";\r\n\r\nconst FilterByAlcohol = ({ value, onChange }) => {\r\n    return (\r\n        <FormControl className=\"alcohol-filter__container\" component=\"fieldset\">\r\n            <RadioGroup className=\"alcohol-filter__radio-group\" row name=\"gender1\" value={value} onChange={onChange}>\r\n                {alcoholicOptions.map(option => (\r\n                    <FormControlLabel\r\n                        key={option}\r\n                        value={option.replace(' ', '_')}\r\n                        control={<Radio color=\"default\"/>}\r\n                        label={option}\r\n                    />\r\n                ))}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default FilterByAlcohol;","import './index.scss';\r\nimport React from 'react';\r\nimport usePersistedState from \"../../hooks/usePersistedState\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SwapVertIcon from '@material-ui/icons/SwapVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport FilterByAlcohol from \"../FilterByAlcohol\";\r\n\r\nconst Filters = ({ onSearch }) => {\r\n    const [isFilterByName, setIsFilterByName] = usePersistedState('isFilterByName', '');\r\n    const [inputValue, setInputValue] = usePersistedState('filterInput', '');\r\n    const [radioValue, setRadioValue] = usePersistedState('filterRadio', '');\r\n\r\n    const toggleActiveFilters = () => {\r\n        setIsFilterByName(state => !state);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const searchByName = () => {\r\n        onSearch({ name: inputValue });\r\n\r\n        setRadioValue('');\r\n    };\r\n\r\n    const onInputKeyPress = (ev) => {\r\n        if (ev.key === 'Enter') {\r\n            ev.preventDefault();\r\n            searchByName();\r\n        }\r\n    };\r\n\r\n    const searchReset = () => {\r\n        setInputValue('');\r\n        setRadioValue('');\r\n\r\n        onSearch({ refresh: true });\r\n    };\r\n\r\n    const searchByAlcohol = (radioValue) => {\r\n        onSearch({ alcohol: radioValue });\r\n\r\n        setInputValue('');\r\n    };\r\n\r\n    const handleRadioChange = (event) => {\r\n        setRadioValue(event.target.value);\r\n\r\n        searchByAlcohol(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"filters__container\">\r\n            <div className=\"filters__icon-button\">\r\n                <Tooltip title=\"Change filters\">\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        edge=\"start\"\r\n                        onClick={toggleActiveFilters}\r\n                    >\r\n                        <SwapVertIcon className=\"filters__swap-icon\"/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n            <div className=\"filters__input\">\r\n                {isFilterByName ?\r\n                    <TextField\r\n                        fullWidth\r\n                        value={inputValue}\r\n                        onChange={handleInputChange}\r\n                        placeholder=\"Search by name...\"\r\n                        onKeyPress={onInputKeyPress}\r\n                    />\r\n                    :\r\n                    <FilterByAlcohol\r\n                        value={radioValue}\r\n                        onChange={handleRadioChange}\r\n                    />\r\n                }\r\n            </div>\r\n            {(isFilterByName ? inputValue : radioValue) && (\r\n                <div className=\"filters__icon-button\">\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        edge=\"end\"\r\n                        onClick={searchReset}\r\n                    >\r\n                        <ClearIcon className=\"filters__search-icon\"/>\r\n                    </IconButton>\r\n                </div>\r\n            )}\r\n            {isFilterByName && (\r\n                <div className=\"filters__icon-button\">\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        edge=\"end\"\r\n                        onClick={searchByName}\r\n                    >\r\n                        <SearchIcon className=\"filters__search-icon\"/>\r\n                    </IconButton>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filters;","import normalizeDrink from \"../utils/normalizeDrink\";\r\n\r\nexport const getDrinks = async (params = {}) => {\r\n    const path = (() => {\r\n        const { name, alcohol } = params;\r\n\r\n        if (name) return `search.php?s=${name}`;\r\n\r\n        if (alcohol) return `filter.php?a=${alcohol}`;\r\n\r\n        return 'random.php';\r\n    })();\r\n\r\n    return await fetch(`https://www.thecocktaildb.com/api/json/v1/1/${path}`)\r\n        .then(response => response.json())\r\n        .then(({ drinks }) => (drinks || []).map(normalizeDrink));\r\n};","import { useState } from 'react';\r\nimport { getDrinks } from \"../api/getRequest\";\r\n\r\nconst useCocktailsList = () => {\r\n    const [cocktailsList, setCocktailsList] = useState([]);\r\n\r\n    const addRandomDrink = async () => {\r\n        const [ newDrink ] = await getDrinks();\r\n\r\n        setCocktailsList(state => {\r\n            if (state.some(drink => drink.id === newDrink.id)) {\r\n                addRandomDrink();\r\n                return [...state];\r\n            }\r\n\r\n            return [...state, newDrink];\r\n        });\r\n    }\r\n\r\n    const loadNewCocktails = async (params = {}) => {\r\n        const { refresh, name, alcohol } = params;\r\n\r\n        if (refresh) {\r\n            setCocktailsList([]);\r\n            return;\r\n        }\r\n\r\n        if (name || alcohol) {\r\n            const drinksList = await getDrinks(params);\r\n\r\n            setCocktailsList(drinksList);\r\n            return;\r\n        }\r\n\r\n        new Array(8).fill(null).forEach(() => addRandomDrink());\r\n    };\r\n\r\n    return [cocktailsList, loadNewCocktails];\r\n}\r\n\r\nexport default useCocktailsList;","const observe = (target, callback) => {\r\n    const handleObserver = (entities) => {\r\n        const currTarget = entities[0];\r\n        if (currTarget.isIntersecting) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    const observer = new IntersectionObserver(handleObserver, {\r\n        rootMargin: '3%',\r\n        threshold: 0.9\r\n    });\r\n\r\n    if (target) {\r\n        observer.observe(target);\r\n    }\r\n}\r\n\r\nexport default observe;","import './index.scss';\r\nimport React from 'react';\r\n\r\nconst Drink = ({ drink, onDrinkClick }) => {\r\n    const { id, image, name } = drink;\r\n\r\n    return (\r\n        <div\r\n            key={id}\r\n            className=\"drink__container\"\r\n            onClick={onDrinkClick}\r\n        >\r\n            <img\r\n                src={image}\r\n                alt={name}\r\n                className=\"drink__img\"\r\n            />\r\n            <div className=\"drink__hover-container\">\r\n                <div className=\"drink__hover-name\">\r\n                    {name}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Drink;","import './index.scss';\r\nimport React from 'react';\r\nimport Drink from \"../Drink\";\r\n\r\nconst CocktailsList = ({ cocktailsList, onDrinkClick }) => {\r\n    return (\r\n        <div className=\"cocktails-list\">\r\n            {cocktailsList.length ?\r\n                cocktailsList.map(drink => (\r\n                    <Drink\r\n                        key={drink.id}\r\n                        drink={drink}\r\n                        onDrinkClick={() => onDrinkClick(drink)}\r\n                    />\r\n                ))\r\n                :\r\n                <p className=\"cocktails-list__empty\">Nothing was found...</p>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CocktailsList;","import './index.scss';\nimport React, { useEffect, useRef, useState } from \"react\";\nimport LocalBarIcon from '@material-ui/icons/LocalBar';\nimport DrinkModal from \"../components/DrinkModal\";\nimport Loader from \"../components/Loader\";\nimport Filters from \"../components/Filters\";\nimport useCocktailsList from \"../hooks/useCocktailsList\";\nimport observe from \"../utils/observe\";\nimport usePersistedState from \"../hooks/usePersistedState\";\nimport CocktailsList from \"../components/CocktailsList\";\n\nconst CocktailsApp = () => {\n    const [cocktailsList, setCocktailsList] = useCocktailsList();\n    const [modalData, setModalData] = useState(false);\n    const [isLazyLoading, setIsLazyLoading] = useState(true);\n    const [filterParam, setFilterParam] = usePersistedState('filterParam', { refresh: true })\n\n    useEffect(() => {\n        setIsLazyLoading(filterParam.refresh);\n        setCocktailsList(filterParam);\n    }, [filterParam]);\n\n    const loader = useRef(null);\n    useEffect(() => {\n        observe(loader.current, setCocktailsList);\n    }, []);\n\n    return (\n        <div className=\"cocktails cocktails__container\">\n            <DrinkModal\n                drink={modalData}\n                onClose={() => setModalData(false)}\n            />\n            <div className=\"cocktails__logo-container\">\n                <LocalBarIcon\n                    className=\"cocktails__logo\"\n                    fontSize=\"small\"\n                />\n            </div>\n            <div className=\"cocktails__filters\">\n                <Filters\n                    onSearch={setFilterParam}\n                    setIsLazyLoading={setIsLazyLoading}\n                    isFiltered={!isLazyLoading}\n                />\n            </div>\n            <CocktailsList\n                cocktailsList={cocktailsList}\n                onDrinkClick={setModalData}\n            />\n            <div\n                className=\"cocktails__loader\"\n                ref={loader}\n                style={{ display: isLazyLoading ? 'block' : 'none' }}\n            >\n                <Loader/>\n            </div>\n        </div>\n    );\n}\n\nexport default CocktailsApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport CocktailsApp from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CocktailsApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}