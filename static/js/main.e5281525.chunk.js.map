{"version":3,"sources":["components/Drink/index.js","utils/mapMeasuresToIngredients.js","components/DrinkModal/index.js","components/Loader/index.js","components/Filters/index.js","hooks/cocktailsList.js","utils/observe.js","app/index.js","reportWebVitals.js","index.js"],"names":["Drink","drink","onDrinkClick","idDrink","strDrinkThumb","strDrink","className","onClick","src","alt","mapMeasuresToIngredients","ingredientsArray","Object","entries","forEach","key","value","includes","ingredientIndex","replace","ingredientMeasure","push","DrinkModal","onClose","strInstructions","ingredients","Modal","open","disableAutoFocus","map","name","measure","Loader","Filters","onSearch","setIsLazyLoading","isFiltered","useState","inputValue","setInputValue","search","TextField","fullWidth","onChange","event","target","placeholder","onKeyPress","ev","preventDefault","IconButton","color","edge","useCocktailsList","cocktailsList","setCocktailsList","useEffect","loadNewCocktails","loadRandomDrink","a","fetch","then","response","json","drinks","newDrink","state","some","loadDrinksByQuery","query","drinksList","amount","i","observe","callback","observer","IntersectionObserver","entities","isIntersecting","rootMargin","threshold","CocktailsApp","modalData","setModalData","isLazyLoading","loader","useRef","current","fontSize","ref","style","display","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5281525.chunk.js","sourcesContent":["import './index.scss';\r\nimport React from 'react';\r\n\r\nconst Drink = ({ drink, onDrinkClick }) => {\r\n    const { idDrink, strDrinkThumb, strDrink } = drink;\r\n\r\n    return (\r\n        <div\r\n            key={idDrink}\r\n            className=\"drink__container\"\r\n            onClick={onDrinkClick}\r\n        >\r\n            <img src={strDrinkThumb} alt={strDrink} className=\"drink__img\"/>\r\n            <div className=\"drink__hover-container\">\r\n                <div className=\"drink__hover-name\">\r\n                    {strDrink}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Drink;","const mapMeasuresToIngredients = (drink) => {\r\n    const ingredientsArray = [];\r\n\r\n    Object.entries(drink).forEach(([key, value]) => {\r\n        if (value && key.includes('strIngredient')) {\r\n            const ingredientIndex = key.replace('strIngredient', '');\r\n            const ingredientMeasure = drink['strMeasure' + ingredientIndex];\r\n            ingredientsArray.push([value, ingredientMeasure]);\r\n        }\r\n    })\r\n\r\n    return ingredientsArray;\r\n}\r\n\r\nexport default mapMeasuresToIngredients;","import './index.scss';\r\nimport React from 'react';\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport mapMeasuresToIngredients from \"../../utils/mapMeasuresToIngredients\";\r\n\r\nconst DrinkModal = ({ drink, onClose }) => {\r\n    const { strDrinkThumb, strDrink, strInstructions } = drink;\r\n\r\n    const ingredients = mapMeasuresToIngredients(drink);\r\n\r\n    return (\r\n        <Modal\r\n            className=\"modal\"\r\n            open={!!drink}\r\n            onClose={onClose}\r\n            disableAutoFocus\r\n        >\r\n            <div\r\n                className=\"modal__container\"\r\n            >\r\n                <div className=\"modal__img-container\">\r\n                    <img src={strDrinkThumb} alt={strDrink} className=\"modal__img\"/>\r\n                </div>\r\n                <div className=\"modal__description\">\r\n                    <div className=\"modal__ingredients\">\r\n                        <h2 className=\"modal__drink-name\">\r\n                            {strDrink}\r\n                        </h2>\r\n                        <ul>\r\n                            {ingredients.map(([name, measure]) => (\r\n                                <li key={name}><b>{name}</b>: {measure}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"modal__instruction-container\">\r\n                        <p className=\"modal__instruction\">{strInstructions}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DrinkModal;","import './index.scss';\r\nimport React from 'react';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import './index.scss';\r\nimport React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst Filters = ({ onSearch, setIsLazyLoading, isFiltered }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const search = () => {\r\n        onSearch(null, inputValue);\r\n        setIsLazyLoading(!inputValue || false);\r\n    }\r\n\r\n    const searchReset = () => {\r\n        setInputValue('');\r\n\r\n        if (!isFiltered) return;\r\n\r\n        onSearch(16);\r\n        setIsLazyLoading(true);\r\n    }\r\n\r\n    const onInputKeyPress = (ev) => {\r\n        if (ev.key === 'Enter') {\r\n            ev.preventDefault();\r\n\r\n            search();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"filters__container\">\r\n            <div className=\"filters__input\">\r\n                <TextField\r\n                    fullWidth\r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Search by name...\"\r\n                    onKeyPress={onInputKeyPress}\r\n                />\r\n            </div>\r\n            {inputValue && (\r\n                <div className=\"filters__icon-button\">\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        edge=\"end\"\r\n                        onClick={searchReset}\r\n                    >\r\n                        <ClearIcon className=\"filters__search-icon\"/>\r\n                    </IconButton>\r\n                </div>\r\n            )}\r\n            <div className=\"filters__icon-button\">\r\n                <IconButton\r\n                    color=\"primary\"\r\n                    edge=\"end\"\r\n                    onClick={search}\r\n                >\r\n                    <SearchIcon className=\"filters__search-icon\"/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filters;","import { useState, useEffect } from 'react';\r\n\r\nconst useCocktailsList = () => {\r\n    const [cocktailsList, setCocktailsList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadNewCocktails(4);\r\n    }, []);\r\n\r\n    const loadRandomDrink = async () => {\r\n        const newDrink = await fetch('https://www.thecocktaildb.com/api/json/v1/1/random.php')\r\n            .then(response => response.json())\r\n            .then(({ drinks }) => drinks[0]);\r\n\r\n        setCocktailsList(state => {\r\n            if (state.some(drink => drink.idDrink === newDrink.idDrink)) {\r\n                loadRandomDrink();\r\n                return [...state];\r\n            }\r\n\r\n            return [...state, newDrink];\r\n        });\r\n    };\r\n\r\n    const loadDrinksByQuery = async (query) => {\r\n        const drinksList = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${query}`)\r\n            .then(response => response.json())\r\n            .then(({ drinks }) => drinks || []);\r\n\r\n        setCocktailsList(drinksList);\r\n    }\r\n\r\n    const loadNewCocktails = (amount = 16, query) => {\r\n        if (!query) {\r\n            for (let i = 1; i <= amount; i++) {\r\n                loadRandomDrink();\r\n            }\r\n            return;\r\n        }\r\n\r\n        loadDrinksByQuery(query);\r\n    };\r\n\r\n    return [cocktailsList, loadNewCocktails];\r\n}\r\n\r\nexport default useCocktailsList;","const observe = (target, callback) => {\r\n    const handleObserver = (entities) => {\r\n        const currTarget = entities[0];\r\n        if (currTarget.isIntersecting) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    const observer = new IntersectionObserver(handleObserver, {\r\n        rootMargin: '3%',\r\n        threshold: 0.9\r\n    });\r\n\r\n    if (target) {\r\n        observer.observe(target);\r\n    }\r\n}\r\n\r\nexport default observe;","import './index.scss';\nimport React, { useEffect, useRef, useState } from \"react\";\nimport LocalBarIcon from '@material-ui/icons/LocalBar';\nimport Drink from \"../components/Drink\";\nimport DrinkModal from \"../components/DrinkModal\";\nimport Loader from \"../components/Loader\";\nimport Filters from \"../components/Filters\";\nimport useCocktailsList from \"../hooks/cocktailsList\";\nimport observe from \"../utils/observe\";\n\nconst CocktailsApp = () => {\n    const [cocktailsList, loadNewCocktails] = useCocktailsList();\n    const [modalData, setModalData] = useState(false);\n    const [isLazyLoading, setIsLazyLoading] = useState(true);\n\n    const loader = useRef(null);\n    useEffect(() => {\n        observe(loader.current, loadNewCocktails);\n    }, []);\n\n    return (\n        <div className=\"cocktails cocktails__container\">\n            <div className=\"cocktails__logo-container\">\n                <LocalBarIcon\n                    className=\"cocktails__logo\"\n                    fontSize=\"large\"\n                />\n            </div>\n            <DrinkModal\n                drink={modalData}\n                onClose={() => setModalData(false)}\n            />\n            <div className=\"cocktails__filters\">\n                <Filters\n                    onSearch={loadNewCocktails}\n                    setIsLazyLoading={setIsLazyLoading}\n                    isFiltered={!isLazyLoading}\n                />\n            </div>\n            <div className=\"cocktails__list\">\n                {cocktailsList.map(drink => (\n                    <Drink\n                        key={drink.idDrink}\n                        drink={drink}\n                        onDrinkClick={() => setModalData(drink)}\n                    />\n                ))}\n            </div>\n            <div\n                className=\"cocktails__loader\"\n                ref={loader}\n                style={{display: isLazyLoading ? 'block' : 'none'}}\n            >\n                <Loader/>\n            </div>\n        </div>\n    );\n}\n\nexport default CocktailsApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport CocktailsApp from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CocktailsApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}